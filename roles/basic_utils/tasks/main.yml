- name: basic_utils print var
  debug:
    var: basic_utils

# region keepassxc
- name: install keepassxc flatpak
  when: basic_utils.enable_keepassxc | default(false)
  command: flatpak install flathub org.keepassxc.KeePassXC --assumeyes

- name: Modify Desktop file
  when: basic_utils.enable_keepassxc | default(false)
  become: true
  lineinfile:
    dest="/var/lib/flatpak/exports/share/applications/org.keepassxc.KeePassXC.desktop"
    line="{{ item.line }}"
    regexp="{{ item.regexp }}"
    state=present
    insertafter=EOF
    create=True
    mode="u+rw"
  with_items:
    - {
        regexp: "^Exec=",
        line: "Exec=/usr/bin/flatpak run --branch=stable --arch=x86_64 --command=keepassxc --file-forwarding org.keepassxc.KeePassXC --platform xcb @@ %f @@",
      }
# manually to do:
# enable ssh-agent integration
# enable auto type for shortcut

# endregion

- name: install signal snap
  when: basic_utils.enable_signal | default(false)
  become: true
  community.general.snap:
    name:
      - signal-desktop

- name: setup ssh config dir
  when: basic_utils.enable_ssh_config_dir | default(false)
  file:
    path: "~/.ssh/config.d"
    state: directory
    mode: "u=rwx,go="

- name: add ssh-config
  when: basic_utils.enable_ssh_config_dir | default(false)
  template:
    src: "ssh-config.j2"
    dest: "~/.ssh/config"
    mode: "u=rw,go="

- name: check if sdkman is installed
  when: basic_utils.enable_java | default(false)
  stat:
    path: ~/.sdkman
  register: basic_utils__sdkman

- name: install sdkman
  when: (basic_utils.enable_java | default(false)) and (basic_utils__sdkman.stat.exists is false)
  shell: curl -s https://get.sdkman.io | bash

- name: add sdkman to .bashrc
  when: basic_utils.enable_java | default(false)
  blockinfile:
    path: "~/.bashrc"
    marker: "# {mark} ANSIBLE MANAGED BLOCK: sdkman-init"
    block: |
      export SDKMAN_DIR="$HOME/.sdkman"
      [[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"

- name: add sdkman to .zshrc
  when: basic_utils.enable_java | default(false)
  blockinfile:
    path: "~/.zshrc"
    marker: "# {mark} ANSIBLE MANAGED BLOCK: sdkman-init"
    block: |
      export SDKMAN_DIR="$HOME/.sdkman"
      [[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"

- name: install sdkman tools
  when: basic_utils.enable_java | default(false)
  shell: |
    bash -c "source ~/.sdkman/bin/sdkman-init.sh; sdk install {{ item }}"
  loop: "{{ basic_utils.sdkman }}"

- name: setup cinc-client alias
  when: basic_utils.enable_cinc | default(false)
  blockinfile:
    path: "~/.bash_aliases"
    marker: "# {mark} ANSIBLE MANAGED BLOCK: cinc-client alias"
    block: |
      alias cinc-client='docker run --rm -it \
      {% for arg in basic_utils.cinc.add_args %}
      {{ arg }} \
      {% endfor %}
      -v $(pwd):/data \
      {{ basic_utils.cinc.image }}:${CHEF_CLIENT_VERSION:-{{ basic_utils.cinc.client_version }}} knife'

- name: flutter development
  when: basic_utils.enable_flutter | default(false)
  block:
    - name: check if fvm is installed
      stat:
        path: ~/.fvm_flutter
      register: basic_utils__fvm

    - name: setup fvm
      when: basic_utils__fvm.stat.exists is false
      become: true
      shell: |
        curl -fsSL https://raw.githubusercontent.com/leoafarias/fvm/refs/tags/3.2.1/scripts/install.sh |  bash -s -- 3.2.1
        rm -rf /usr/local/bin/fvm
        mv /root/.fvm_flutter /home/{{ user }}/.fvm_flutter
        chown -R {{ user }}:{{ user }} /home/{{ user }}/.fvm_flutter

    - name: add fvm to path
      blockinfile:
        path: "~/.bashrc"
        marker: "# {mark} ANSIBLE MANAGED BLOCK: add fvm to PATH"
        block: |
          export PATH="/home/{{ user }}/.fvm_flutter/bin:$PATH"

    - name: install android studio
      become: true
      community.general.snap:
        name:
          - android-studio
        classic: true

    - name: Add docker user to kvm group
      become: true
      user:
        name: "{{ user }}"
        append: true
        groups: kvm

    - name: Setup user bin dir
      file:
        path: "~/bin"
        state: directory
        mode: "u=rwx,go=rx"

    - name: source user bin dir
      blockinfile:
        path: "~/.bashrc"
        marker: "# {mark} ANSIBLE MANAGED BLOCK: bin of user"
        block: |
          export PATH="/home/{{ user }}/bin:$PATH"

    - name: add dart proxy
      template:
        src: "dart-proxy.j2"
        dest: "~/bin/dart"
        mode: "u=rwx,go=rx"

    - name: add flutter proxy
      template:
        src: "flutter-proxy.j2"
        dest: "~/bin/flutter"
        mode: "u=rwx,go=rx"
