- name: "set defaults for kubectl role"
  set_fact:
    kubectl_defaults:
      contex_management_part: |
        function ktx() {
          if [ $# -eq 0 ]; then
             kubectl config get-contexts
             return
          fi
          cat ${shell_tmp_dir}/.kube/config | yq '.current-context="'$1'"' | cat > ${shell_tmp_dir}/.kube/config
        }

        KUBECONFIG="$HOME/.kube/config.d/empty"
        for file in $(find $HOME/.kube/config.d -type f); do
          KUBECONFIG="$KUBECONFIG:$file"
        done

        shell_tmp_dir=$(mktemp -d)
        mkdir ${shell_tmp_dir}/.kube
        yq eval -n ' .apiVersion="v1" | .current-context="" | .contexts=[] | .users=[] | .clusters=[] ' | cat  > ${shell_tmp_dir}/.kube/config
        export KUBECONFIG="$KUBECONFIG:${shell_tmp_dir}/.kube/config"
        # azure-cli modifies the first file it finds in $KUBECONFIG
        export KUBECONFIG="${shell_tmp_dir}/.kube/config:$KUBECONFIG"

- name: "set facts for kubectl role"
  set_fact:
    kubectl: "{{ kubectl_defaults | combine( (kubectl | default({})), recursive=true ) }}"

- name: kubectl print var
  debug:
    var: kubectl

- name: Install kubectl and helm
  become: true
  community.general.snap:
    name:
      - kubectl
      - helm
    classic: true

- name: Install yq
  become: true
  community.general.snap:
    name:
      - yq

- name: Source kubectl tools bash
  blockinfile:
    path: "~/.bashrc"
    marker: "# {mark} ANSIBLE MANAGED BLOCK: kubectl context"
    block: "{{ kubectl.contex_management_part }}"

- name: Source kubectl tools zsh
  when: enable_zsh | default(false)
  blockinfile:
    path: "~/.zshrc"
    marker: "# {mark} ANSIBLE MANAGED BLOCK: kubectl context"
    block: "{{ kubectl.contex_management_part }}"

- name: Add kubectl completion for alias for bash
  blockinfile:
    path: "~/.bashrc"
    marker: "# {mark} ANSIBLE MANAGED BLOCK: kubectl completion"
    block: |
      source <(kubectl completion bash)
      complete -F __start_kubectl k

- name: Add kubectl completion for alias for zsh
  when: enable_zsh | default(false)
  blockinfile:
    path: "~/.zshrc"
    marker: "# {mark} ANSIBLE MANAGED BLOCK: kubectl completion"
    block: |
      source <(kubectl completion zsh)
      complete -F __start_kubectl k
      [[ $commands[kubectl] ]] && source <(kubectl completion zsh)

- name: Add bash aliases
  lineinfile: dest="~/.bash_aliases"
    line="{{ item.line }}"
    regexp="{{ item.regexp }}"
    state=present
    insertafter=EOF
    create=True
    mode="u+rw"
  with_items:
    - { regexp: "^alias k=", line: "alias k=kubectl" }
    - { regexp: "^alias ka=", line: "alias ka='kubectl --as cluster-admin'" }
    - {
        regexp: "^alias kn=",
        line: 'alias kn=''f() { [ "$1" ] && kubectl config set-context --current --namespace $1 || kubectl config view --minify | grep namespace | cut -d" " -f6 ; } ; f''',
      }

- name: install k9s
  command:
    cmd: |
      {{ homebrew_path }}/brew install k9s
    creates: "{{ homebrew_path }}/k9s"

- name: install oidc_plugin
  when: kubectl.enable_oidc_plugin | default(false)
  command:
    cmd: |
      {{ homebrew_path }}/brew install kubelogin
    creates: "{{ homebrew_path }}/kubectl-oidc_login"

- name: install kubeconform
  command:
    cmd: |
      {{ homebrew_path }}/brew install kubeconform
    creates: "{{ homebrew_path }}/kubeconform"

- name: install kustomize
  command:
    cmd: |
      {{ homebrew_path }}/brew install kustomize
    creates: "{{ homebrew_path }}/kustomize"

- name: install kubeseal
  command:
    cmd: |
      {{ homebrew_path }}/brew install kubeseal
    creates: "{{ homebrew_path }}/kubeseal"
